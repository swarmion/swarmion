on:
  push:
    branches:
      - main

name: ðŸš€ Deploy production
concurrency: push_main

permissions: write-all

env:
  CI: true

jobs:
  build-format-lint-test:
    name: ðŸš€ Build, format, lint and test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v4
      - name: Install & cache node dependencies
        uses: ./.github/actions/install-node-deps
      - name: 'ðŸ’„ Check format'
        run: pnpm format-check
      - name: 'ðŸ§ª Test linter'
        run: pnpm nx affected --targets=test-linter,test-type,test-circular
      - name: 'ðŸ§ª Run unit tests'
        run: pnpm nx run-many --target=test-unit
      - name: Install LCOV
        run: |
          sudo apt-get update
          sudo apt-get install lcov
      - name: 'ðŸ”ƒ Merge lcov files'
        run: ./scripts/merge-lcov.sh
      - name: ðŸ”Ž SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploy production
    needs: build-format-lint-test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v4
      - name: Install & cache node dependencies
        uses: ./.github/actions/install-node-deps
      - name: Configure AWS credentials with assume role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: us-east-1
      - name: Deploy production
        # nx run-many is used here, because it will not throw an error if our target action isn't found in the project, which is exactly what we want!
        run: pnpm nx run-many --target=deploy-production --parallel=2

  # deploy-staging:
  #   name: Deploy staging
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   needs: build-format-lint-test
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         # We need to fetch all branches and commits so that Nx affected has a base to compare against.
  #         fetch-depth: 0
  #     - uses: nrwl/nx-set-shas@v4
  #     - name: Install & cache node dependencies
  #       uses: ./.github/actions/install-node-deps
  #     - name: Configure AWS credentials with assume role
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_STAGING_ROLE_ARN }}
  #         aws-region: us-east-1
  #     - name: Deploy staging
  #       # nx run-many is used here, because it will not throw an error if our target action isn't found in the project, which is exactly what we want!
  #       run: pnpm nx run-many --target=deploy-staging --parallel=2

  # integration-tests:
  #   name: Run integration tests
  #   needs: deploy-staging
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         # We need to fetch all branches and commits so that Nx affected has a base to compare against.
  #         fetch-depth: 0
  #     - uses: nrwl/nx-set-shas@v4
  #     - name: Install & cache node dependencies
  #       uses: ./.github/actions/install-node-deps
  #     - name: Configure AWS credentials with assume role
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_STAGING_ROLE_ARN }}
  #         aws-region: us-east-1
  #     - name: Run integration tests
  #       run: pnpm nx run-many --target=test-integration --parallel=2
